8/24/2016
	Data Structures - Review
		+ Arrays
		+ Linked-List
			- Single/Double
		+ Graphs
			- Nodes/Edges
			- Directed/Undirected
			Representing Graphs In Code
				- Adjacency List
				- Adjacency Matrix
				List = [(A, B), (B, C)]
				
				Adjacency Matrix		O(1) to check connections
					A	B	C
				A	1	1	0
				B	0	1	1
				C	0	0	1
				
				Traversing a Graph
					Walk
						Any Route
					Path
						A Route With No Repeating Nodes
					Trail
						A Route With Out Repeating Edges
					Cycle
						A Path That Ends And Begins On The Same Node
					Circuit
						A Trail That Ends And Begins On The Same Node
		+ Tree
			- A Graph Without Cycles
			Pre Order
					O      Balanced (Differs By One On Either Side)
				   / \
				  O   O
				 / \ /
				O  O O
				
				-As You Encounter Them
				
				BFS : Local Order
					Searches The First Level First, Then The Second Level.
				
				EX:
					1, 2, 3, 4, 5
						1
						 \
						  2
						   \
						    3
							 \
							  4
							   \
							    5
								
				EX:
							Tree			Level
						2^0 = 1		O		0
						    	   / \		
						2^1 = 2   O   O     1
								 / \ / \
						2^2 = 4 O  O O  O 	2
						
						Height Of Just The Root Is 0
						
						Number Of Nodes = |N|
						Height = floor(lg(|N|))
						
						
	Algorithmic Problem Solving (Cornom)
		- Understand The Problem
		- Decide On:
			Computational Means
			Exact/Approximate Solution?
			Data Structure
				How Long It Takes / How Much Memory It Uses
			Design Technique
		- Design The Algorithm
		- Prove Correctness
		- Analyze The Algorithm
		- Code It
		Problem Types
			Sort
				* Best Worst Case is O(nlgn)
			Searching
			String Processing
			************Graph Problems
			Geometric Problems
			Numerical Problems
		Asymptotic Notation
			Worst Case
				Guarenteed It Will Do No Worse Than O()
				https://en.wikipedia.org/wiki/Big_O_notation
				See Onenote
			
		
	Compare Orders Of Growth
		Use Limits
			L'Hopitals Rule
		Stirling's Formula
			n! (aprox) = rad(2 * pi * n) (n / e)^n
	
	Analysis Of Non-Recursive Algorithm
		1) Find What Determins The Input Size
		2) Identify The Algorithm's Basic Operation
			(Usually In The Inner-Most Loop)
		3) Check If The Basic Operation Depends Only On The Size Of The Input
		4) Set Up Summation To Represent The Number Of Times The Basic Operation Is Executed
		5) Develop A Closed-Form Solution Or Order Of Growth
		
HW 8/24/2016
	Lab 1 On Site
	Use The Def Of Big O or L'Hopitals Rule
		
8/29/2016
	example
		//Array A and Size n
		FindMax(A, n):
			int max=0;
			for (i = 0; i < n; ++i):
				if (A[i] > max) max = A[i];
			return max;

8/31/2016
	void insertionSort(int *a, int n) {
		for (int i = 1; i < Size; ++i) {
			int v = a[i];
			int j = i-1;
			while (i >= 0 && a[i] > v) {
				a[j+i] = a[j];
				j--;
			}
			a[i+1] = v;
		}
	}
	proof
		First, construct the loop invariant
			a condition that holds after each iteration of the loop
		Prove for:
			Initialiization - prior to the first iteration
			Maintanence - After the iteration
			Termination - After the loop terminates
			
	Stack
	DFS (Node n)
		DFS(n -> left)
		DFS(n -> right)
		
	DigitCount(n)
		if (n==0) return 1;
		if (n==1) return 1;
		return DigitCount(n / 2) + 1;
		
		
	A(0) = 0;
	A(1) = 1;
	A(n) = A(n/2) + 1;
		A(n/2) = A(n/2/2) + 1 = A(n/4) + 1;
			A(n/4) = A(n/4/2) + 1 = A(n/8) + 1;
		A(n/2) = A(n/8) + 1 + 1;
	A(n) = A(n/8) + 1 + 1 + 1 = A(n/8) + 3;
	A(n) = A(n/(2^i)) + i;
	A(n) = A(n/(2^(log 2 n))) + log 2 n = lg(n)
	lg(n) <= c lg(n)
	in O(lg(n))
	
	iter (int a, int n)
		if (n == 0) return 1
		if (n==1) return a
		for (i = 1; i < n; ++i) {
			a *= a;
		}
		return 1;
		
	rec(a, n)
		if (n == 0) return 1
		if (n == 1) return a
		return rec(a, n/2) * rec(a, n/2);
		#could be return (rec(a, n/2))**2
	m(0) = 0
	m(1) = 0
	m(n) = m(n/2) + 1
	in O(lg(n))
	rec (a, n)
		if (n==0) retrun 1;
		if (n == 1) return a;
		if (n %2)
			return (rec(a,(n-1)/2)**2) * A
		else
			return (rec(a,n/2)**2)
			
	HINT
		Calls itself recurive
			divides by a number
			almost always has a log
			ex : T(n) = T(n/b)

9/21/2016
	Minimal Spanning Tree
		Find spanning tree that minimize the sum of edges
				^(Includes all nodes from graph)
		Prim's Algorithm
			-Greedy Algorithm
		Kruskal's Algorithm
			-Greedy
			-Must Detect if new edge will create a cycle
		Cycle Detection
			Use DFS/BFS
			1. Select a random node
			2. Preform DFS/BFS from node
			3. If the current node has been visited before then there is a cycle.
		
		
9/26/2016
	Lab4
		Using JSON
		Build a graph for each palace
	How to execute the jar in python
		import subprocess
		line_coordinates = ''
		for y in range(0, 500, 6):
			line_coordinates += '0 '+ str(y) + ' 500 ' + str(y) + ' '
		subprocess.run('java -jar MapViewer.jar ' + line_coordinates)
		
	How to parse a JSON file in python
		import json
		hyrule_json = open('hyrule.json')
		hyrule_data = json.load(hyrule_json)
		hyrule_json.close()
		
		for (k in hyrule_data):
			for v in hyrule_data[k]:
				x, y = hyrule_data[k][v]
				
	OtherStuff
		def add_edge(graph, from_vertex, to_vertex):
			if from_vertex not in graph.keys():
				graph[from_vertex] = []
			if to_vertex not in graph.keys():
				graph[to_vertex] = []
			if to_vertex not in graph[from_vertex]:
				graph[from_vertex].append(to_vertex)
			if from_vertex not in graph[to_vertex]:
				graph[to_vertex].append(from_vertex)

		def dfs(graph, current_vertex=None, parent_vertex=None, visited=[], cycle=False):
			if current_vertex == None:
				current_vertex = list(graph.keys())[0]
			visted.append(current_vertex)
			print(visited
			
			for child in graph[current_vertex]:
				if child not in visited:
					cycle = dfs(graph, child, current_vertex, visited, cycle)
				elif child != parent_vertex:
					cycle = True
					
			return cycle
			
		graph = {}
		

		add_edge(graph, 'A', 'B')
		add_edge(graph, 'B', 'C')
		add_edge(graph, 'C', 'D')
		
		print(graph)
		
	Checking for loops
		3 groups, Stack (next children to check), Current (the current one we are checking, needs to include parent),
			visited, which ones weve been to
			
10/3/2016
	Dynamic Programming
		Store and resuse computed results
		Memoization
		Recursive approach is typically top down
		DP Table(For Warshall/Floyd, this is the adj. matrix)
			Solve using bottom up approach
				 10   10   10
				A -> B -> C -> D
				|--------------^
					50
					
				A = 0, B = 1, C = 2, D = 3
				Horizontal is j
				Vertical is i
		
				k = -1 & 0					k = 1						k = 2
					A	B	C	D				A	B	C	D				A	B	C	D
				A	0	10	INF	50			A			20	50			A				30
				B	10	0	10	INF			B							B
				C	INF	10	0	10			C							C	
				D	50	INF	10	0			D							D
		
				D(0, 3, 0) = min(D(0, 3, -1), D(0, 0, -1) + D(0, 3, -1))
				min (50, 0 + 50) = 50
			
				
	Warshall's Algorithm
		Transitive colosure of a graph
		k=The number of nodes we can pass through to go from u to v
		k=-1, can't pass through any other node, must be a direct edge
		k=0, we can pass through the first node
		k=1, we can pass through the first 2 nodes.
		D(i, j, k) = D(i, j, k-1)|D(i, k, k-1)&D(k, j, k-1)
	Dijkstra Recurrence Relation
		D(i, j, k) = min(D(i, j, k-1), D(i, k, k-1) + D(j, k, k-1))
		O(3^n)
		
10/10/2016
	Floyd-Worshal
		Implementation
	Knapsack
		Knapsack has a maximum weight, w
		maximize value of items in the bag
		
	2 problems
		research how we'd solve them before wednesday
		Job Scheduling Problem
			Look it up


10/12/2016
	Dynamic Programming
		1. Characterize the structure of an optimal solution
		2. Define a recurrence relation, relating the optimal solution to the optimal solutions of its subproblems
		3. Build the solutions to the subproblems bottom-up
		4. Use solutions to subproblems to build solution to the main problem
		L = line
		S = amount of time at a stage
		d = amount of time to move to the next stage on the same line
					0S0		0S1		0S2		0S3
		L = 0		0-0d0->	1-0d1->	2-0d2->	3
					0t0		
					(to 1^1)
					1S0		1S1		1S2		1S3
		L = 1		0-1d0->	1-1d1->	2-1d2->	3
		(IVE GIVEN UP WRITING THE REST DOWN, TOO MANY ARROWS)
		